{"version":3,"sources":["components/navbar/NavBar.js","components/image.results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","ImageResults","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageListContent","_this2","this","images","props","GridList","cols","style","margin","map","title","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","width","Component","Search","searchText","amount","apiURL","apiKey","onTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","onAmountChange","index","TextField_default","inputStyle","onChange","floatingLabelText","fullWidth","labelStyle","SelectField_default","MenuItem_default","primaryText","length","image_results_ImageResults","App","MuiThemeProvider_default","navbar_NavBar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.576bb349.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavBar = () => \n    <div className=\"NavBar\">\n        <div className=\"logo\">P<span>X</span></div>\n    </div>\n\nexport default NavBar\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile} from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\nclass ImageResults extends Component {\n  state = {\n      open: false,\n      currentImg: ''\n  }\n  handleOpen = img => {\n      this.setState({ open: true, currentImg: img});\n  }\n  handleClose = () => {\n    this.setState({ open: false});\n}\n  render() {\n        let imageListContent;\n        const { images } = this.props; //const images={this.props.images};\n\n      if(images){\n        imageListContent = (\n            <GridList cols={2} style={{ margin: '5vw'}}>\n                {images.map(img => (\n                    <GridTile                    \n                        title={img.tags}\n                        key={img.id}\n                        subtitle={\n                            <span>\n                                by <strong>{img.user}</strong>\n                            </span>\n                        }\n                        actionIcon={\n                            <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\n                                <ZoomIn color=\"white\" />\n                            </IconButton>\n                        }\n                    >\n                        <img src={img.largeImageURL} alt='' />\n                    </GridTile>\n                ))}\n            </GridList>\n        )\n      }else{\n        imageListContent = null;\n      }\n\n      const actions = [\n          <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\n      ]\n    return(\n      <div>\n        {imageListContent}\n        <Dialog \n            actions={actions}\n            modal={false}\n            open={this.state.open}\n            onRequestClose={this.handleClose}>\n            <img src={this.state.currentImg} alt='' style={{ width: '100%'}} />\n        </Dialog>\n      </div>\n    )\n  }\n}\nImageResults.propTypes = {\n    images: PropTypes.array.isRequired\n}\n\nexport default ImageResults;","import React, { Component } from 'react';\nimport TextField from 'material-ui/TextField';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport axios from 'axios';\nimport ImageResults from '../image.results/ImageResults';\n\nclass Search extends Component {\n    state = {\n        searchText: \"\",\n        amount: 16,\n        apiURL: 'https://pixabay.com/api',\n        apiKey: '11203747-477f21bca09afa2a9791d0410',\n        images: [],\n    }\n    onTextChange = (e) => {\n        const val = e.target.value;\n        this.setState(\n            {[e.target.name]: val}, () => {\n                if(val === ''){\n                    this.setState({images: []});\n                }else{\n                    axios.get(`${this.state.apiURL}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\n                    .then(res => this.setState({images: res.data.hits}))\n                    .catch(err => console.log('err'));\n                }\n            }\n        );\n    }\n    onAmountChange = (e, index, value) => \n        this.setState({\n            amount: value\n        });\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"search\">\n        <h1>Pixabay photo finder</h1>\n        <h2>The internetâ€™s source of freely useable images.<br/>\n            Powered by creators everywhere.</h2>\n            <TextField\n                className='textfield'\n                inputStyle={{ color: '#fff' }}\n                name=\"searchText\"\n                value={this.state.searchText}\n                onChange={this.onTextChange}\n                floatingLabelText=\"Search For Images\"\n                fullWidth={false}\n                labelStyle={{ color: '#fff'}}\n            />\n            <br/>\n            <SelectField \n                name=\"amount\"\n                floatingLabelText=\"Amount\"\n                value={this.state.amount}\n                onChange={this.onAmountChange}\n                labelStyle={{ color: '#fff' }}\n                \n            >\n                <MenuItem value={6} primaryText=\"6\" />\n                <MenuItem value={10} primaryText=\"10\" />\n                <MenuItem value={16} primaryText=\"16\" />\n                <MenuItem value={30} primaryText=\"30\" />\n                <MenuItem value={50} primaryText=\"50\" />\n            </SelectField>            \n        </div>       \n        {this.state.images.length > 0 ? (<ImageResults images={this.state.images} />) : null}\n      </div>\n    )\n  }\n}\nexport default Search","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport NavBar from './components/navbar/NavBar';\nimport Search from './components/search/Search';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n          <div>\n            <NavBar />\n            <Search />\n          </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}